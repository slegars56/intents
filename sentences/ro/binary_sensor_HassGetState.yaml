language: ro
intents:
  HassGetState:
    data:
      # https://www.home-assistant.io/integrations/binary_sensor/
      # Battery
      - sentences:
          - "<name_class_dinZona_este_state>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          state_singular: "{bs_battery_states_singular:state}"
          state_plural: "{bs_battery_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: battery
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "<exista_class_state_in_zona>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          state_singular: "{bs_battery_states_singular:state}"
          state_plural: "{bs_battery_states_plural:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_plural: "baterii[le]"
          state_plural: "{bs_battery_states_plural:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "<care_class_este_state_in_zona>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          state_singular: "{bs_battery_states_singular:state}"
          state_plural: "{bs_battery_states_plural:state}"
        response: which
        slots:
          domain: binary_sensor
          device_class: battery

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
        expansion_rules:
          class_plural: "baterii[le]"
          state_plural: "{bs_battery_states_plural:state}"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: battery

      # Battery charging
      - sentences:
          - "<name_class_dinZona_este_state>"
          - "<name_class_dinZona_verbState>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          class: "bateri(e|a|i[le])"
          state: "{bs_battery_charging_states:state}"
          verb_state: "{bs_battery_charging_states_passive:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: battery_charging
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_class_care_verbState_in_zona>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          state: "{bs_battery_charging_states:state}"
          verb_state: "{bs_battery_charging_states_passive:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
          - "<toate_class_verbState_in_zona>"
        expansion_rules:
          class_plural: "baterii[le]"
          state: "{bs_battery_charging_states:state}"
          verb_state: "{bs_battery_charging_states_passive:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "bateri(e|a)"
          class_plural: "baterii[le]"
          state: "{bs_battery_charging_states:state}"
          verb_state: "{bs_battery_charging_states_passive:state}"
        response: which
        slots:
          domain: binary_sensor
          device_class: battery_charging

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_class_verbState_in_zona>"
        expansion_rules:
          class_plural: "baterii[le]"
          state: "{bs_battery_charging_states:state}"
          verb_state: "{bs_battery_charging_states_passive:state}"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: battery_charging

      # Carbon monoxide
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object: monoxid[ul] de carbon
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: carbon_monoxide
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object: "monoxid[ul] de carbon"
        response: any
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object: "monoxid[ul] de carbon"
        response: which
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object: "monoxid[ul] de carbon"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: carbon_monoxide

      # Cold
      - sentences:
          - "<name_dinZona_este_state>"
          - "(<exista> {bs_cold_states:state};[<din> ]<name>)[ <din_zona>]"
        expansion_rules:
          state_singular: "{bs_cold_states_singular:state}"
          state_plural: "{bs_cold_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: cold
        slots:
          domain: binary_sensor
          device_class: cold
      - sentences:
          - "(s-a[u] r(ă|a)cit|a[u] (î|i)nghe(ț|t)at) <name>[ <din_zona>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: cold
        slots:
          domain: binary_sensor
          device_class: cold
          state: "on"

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<frig>"
          state_singular: "{bs_cold_states_singular:state}"
          state_plural: "{bs_cold_states_plural:state}"
          state: "({bs_cold_states_singular:state}|{bs_cold_states_plural:state})"
        response: any
        slots:
          domain: binary_sensor
          device_class: cold

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<frig>"
          state_singular: "{bs_cold_states_singular:state}"
          state_plural: "{bs_cold_states_plural:state}"
          state: "({bs_cold_states_singular:state}|{bs_cold_states_plural:state})"
        response: all
        slots:
          domain: binary_sensor
          device_class: cold

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<frig>"
          state_singular: "{bs_cold_states_singular:state}"
          state_plural: "{bs_cold_states_plural:state}"
          state: "({bs_cold_states_singular:state}|{bs_cold_states_plural:state})"
        response: which
        slots:
          domain: binary_sensor
          device_class: cold

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<frig>"
          state_singular: "{bs_cold_states_singular:state}"
          state_plural: "{bs_cold_states_plural:state}"
          state: "({bs_cold_states_singular:state}|{bs_cold_states_plural:state})"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: cold

      # Connectivity
      - sentences:
          - "<name_dinZona_este_state>"
        expansion_rules:
          state_singular: "{bs_connectivity_states_singular:state}"
          state_plural: "{bs_connectivity_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: connectivity
        slots:
          domain: binary_sensor
          device_class: connectivity
      - sentences:
          - "(are conexiune; <name>[ <din_zona>])"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: connectivity
        slots:
          domain: binary_sensor
          device_class: connectivity
          state: "on"

      - sentences:
          - "<exista_class_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          state_singular: "{bs_connectivity_states_singular:state}"
          state_plural: "{bs_connectivity_states_plural:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          state_singular: "{bs_connectivity_states_singular:state}"
          state_plural: "{bs_connectivity_states_plural:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "<care_class_este_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          state_singular: "{bs_connectivity_states_singular:state}"
          state_plural: "{bs_connectivity_states_plural:state}"
        response: which
        slots:
          domain: binary_sensor
          device_class: connectivity

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          state_singular: "{bs_connectivity_states_singular:state}"
          state_plural: "{bs_connectivity_states_plural:state}"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: connectivity

      # Door
      - sentences:
          - "<name_class_dinZona_este_state>"
          - "<name_class_dinZona_verbState>"
        expansion_rules:
          class_singular: "<usa>"
          class_plural: "<usile>"
          class: "(<class_singular>|<class_plural>)"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: door
        slots:
          domain: binary_sensor

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_class_care_verbState_in_zona>"
        expansion_rules:
          class_singular: "<usa>"
          class_plural: "<usile>"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: any
        excludes_context:
          device_class:
            - garage_door
        slots:
          domain: binary_sensor
          device_class: door

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
          - "<toate_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "<usa>"
          class_plural: "<usile>"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: all
        slots:
          domain: binary_sensor
          device_class: door

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "<usa>"
          class_plural: "<usile>"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: which
        slots:
          domain: binary_sensor
          device_class: door

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "<usa>"
          class_plural: "<usile>"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: door

      # Gas
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object_singular: "gaz"
          object_plural: "gaze"
          object: "gaz[e]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: gas
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object_singular: "gaz"
          object_plural: "gaze"
          object: "gaz[e]"
        response: any
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "gaz"
          object_plural: "gaze"
          object: "gaz[e]"
        response: which
        slots:
          domain: binary_sensor
          device_class: gas

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "gaz"
          object_plural: "gaze"
          object: "gaz[e]"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: gas

      # Heat
      - sentences:
          - "<name_dinZona_este_state>"
          - "(<exista> {bs_heat_states:state};[<din> ]<name>)[ <din_zona>]"
        expansion_rules:
          state_singular: "{bs_heat_states_singular:state}"
          state_plural: "{bs_heat_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: heat
        slots:
          domain: binary_sensor
          device_class: heat
      - sentences:
          - "s-a[u] ((î|i)nc(ă|a)lzit|(î|i)ncins) <name>[ <din_zona>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: heat
        slots:
          domain: binary_sensor
          device_class: heat
          state: "on"

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<cald>"
          state_singular: "{bs_heat_states_singular:state}"
          state_plural: "{bs_heat_states_plural:state}"
          state: "({bs_heat_states_singular:state}|{bs_heat_states_plural:state})"
        response: any
        slots:
          domain: binary_sensor
          device_class: heat

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<cald>"
          state_singular: "{bs_heat_states_singular:state}"
          state_plural: "{bs_heat_states_plural:state}"
          state: "({bs_heat_states_singular:state}|{bs_heat_states_plural:state})"
        response: all
        slots:
          domain: binary_sensor
          device_class: heat

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<cald>"
          state_singular: "{bs_heat_states_singular:state}"
          state_plural: "{bs_heat_states_plural:state}"
          state: "({bs_heat_states_singular:state}|{bs_heat_states_plural:state})"
        response: which
        slots:
          domain: binary_sensor
          device_class: heat

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          object: "<cald>"
          state_singular: "{bs_heat_states_singular:state}"
          state_plural: "{bs_heat_states_plural:state}"
          state: "({bs_heat_states_singular:state}|{bs_heat_states_plural:state})"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: heat

      # Light
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object: "lumin(ă|a)"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: light
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object_singular: "lumin(ă|a)"
          object_plural: "lumini"
          object: "lumin(ă|a|i)"
        response: any
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "lumin(ă|a)"
          object_plural: "lumini"
          object: "lumin(ă|a|i)"
        response: which
        slots:
          domain: binary_sensor
          device_class: light

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "lumin(ă|a)"
          object_plural: "lumini"
          object: "lumin(ă|a|i)"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: light

      # Lock
      - sentences:
          - "<name_class_dinZona_este_state>"
          - "<name_class_dinZona_verbState>"
        expansion_rules:
          class_singular: "(<incuietoarea>|<usa>|<poarta>)"
          class_plural: "(<incuietorile>|<usile>|<portile>)"
          class: "<class_singular>|<class_plural>"
          state_singular: "{bs_lock_states_singular:state}"
          state_plural: "{bs_lock_states_plural:state}"
          verb_state: "({bs_lock_states_passive:state}|{bs_lock_states_active:state})"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: lock
        slots:
          domain: binary_sensor

      # Moisture
      - sentences:
          - "<este> {bs_moisture_states_singular:state} <name>[ <din_zona>]"
          - "<name>[ <din_zona>] <este> {bs_moisture_states_singular:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: moisture
        slots:
          domain: binary_sensor
          device_class: moisture

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_class_care_verbState_in_zona>"
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          class: "(<class_singular>|<class_plural>)"
          object: "(umezeal(ă|a)|inunda(ț|t)i(e|a))"
          state_singular: "{bs_moisture_states_singular:state}"
          state_plural: "{bs_moisture_states_plural:state}"
          state: "({bs_moisture_states_singular:state}|{bs_moisture_states_plural:state})"
          verb_state: "{bs_moisture_states_passive:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: moisture

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
          - "<toate_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          class: "(<class_singular>|<class_plural>)"
          object: "(umezeal(ă|a)|inunda(ț|t)i(e|a))"
          state_singular: "{bs_moisture_states_singular:state}"
          state_plural: "{bs_moisture_states_plural:state}"
          state: "({bs_moisture_states_singular:state}|{bs_moisture_states_plural:state})"
          verb_state: "{bs_moisture_states_passive:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: moisture

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_class_verbState_in_zona>"
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          class: "(<class_singular>|<class_plural>)"
          object: "(umezeal(ă|a)|inunda(ț|t)i(e|a))"
          state_singular: "{bs_moisture_states_singular:state}"
          state_plural: "{bs_moisture_states_plural:state}"
          state: "({bs_moisture_states_singular:state}|{bs_moisture_states_plural:state})"
          verb_state: "{bs_moisture_states_passive:state}"
        response: which
        slots:
          domain: binary_sensor
          device_class: moisture

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_class_verbState_in_zona>"
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          class_singular: "<dispozitiv>"
          class_plural: "<dispozitive>"
          class: "(<class_singular>|<class_plural>)"
          object: "(umezeal(ă|a)|inunda(ț|t)i(e|a))"
          state_singular: "{bs_moisture_states_singular:state}"
          state_plural: "{bs_moisture_states_plural:state}"
          state: "({bs_moisture_states_singular:state}|{bs_moisture_states_plural:state})"
          verb_state: "{bs_moisture_states_passive:state}"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: moisture

      # Motion
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object_singular: "mi(ș|s)care"
          object_plural: "mi(ș|s)c(ă|a)ri"
          object: "mi(ș|s)c(are|(ă|a)ri)"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: motion
        slots:
          domain: binary_sensor
          device_class: motion

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object_singular: "mi(ș|s)care"
          object_plural: "mi(ș|s)c(ă|a)ri"
          object: "mi(ș|s)c(are|(ă|a)ri)"
        response: any
        slots:
          domain: binary_sensor
          device_class: motion

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "mi(ș|s)care"
          object_plural: "mi(ș|s)c(ă|a)ri"
          object: "mi(ș|s)c(are|(ă|a)ri)"
        response: which
        slots:
          domain: binary_sensor
          device_class: motion

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "mi(ș|s)care"
          object_plural: "mi(ș|s)c(ă|a)ri"
          object: "mi(ș|s)c(are|(ă|a)ri)"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: motion

      # Occupancy
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object: "ocupare"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: occupancy
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object: "ocupare"
        response: any
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object: "ocupare"
        response: which
        slots:
          domain: binary_sensor
          device_class: occupancy

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object: "ocupare"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: occupancy

      # Opening
      - sentences:
          - "<name_dinZona_este_state>"
          - "<name_dinZona_verbState>"
        expansion_rules:
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: opening
        slots:
          domain: binary_sensor

      # Plug
      - sentences:
          - "<name_class_dinZona_este_state>"
        expansion_rules:
          class_singular: "(priz(ă|a)|(ș|s)techer[ul]|cablu[l])"
          class_plural: "(prize[le]|(ș|s)techere[le]|cabluri[le])"
          state_singular: "{bs_plug_states_singular:state}"
          state_plural: "{bs_plug_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: plug
        slots:
          domain: binary_sensor
          device_class: plug

      - sentences:
          - "<exista_class_state_in_zona>"
        expansion_rules:
          class_singular: "(priz(ă|a)|(ș|s)techer[ul]|cablu[l])"
          class_plural: "(prize[le]|(ș|s)techere[le]|cabluri[le])"
          class: "(<class_singular>|<class_plural>)"
          state_singular: "{bs_plug_states_singular:state}"
          state_plural: "{bs_plug_states_plural:state}"
          state: "({bs_plug_states_singular:state}|{bs_plug_states_plural:state})"
        response: any
        slots:
          domain: binary_sensor
          device_class: plug

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "(priz(ă|a)|(ș|s)techer[ul]|cablu[l])"
          class_plural: "(prize[le]|(ș|s)techere[le]|cabluri[le])"
          class: "(<class_singular>|<class_plural>)"
          state_singular: "{bs_plug_states_singular:state}"
          state_plural: "{bs_plug_states_plural:state}"
          state: "({bs_plug_states_singular:state}|{bs_plug_states_plural:state})"
        response: all
        slots:
          domain: binary_sensor
          device_class: plug

      - sentences:
          - "<care_class_este_state_in_zona>"
        expansion_rules:
          class_singular: "(priz(ă|a)|(ș|s)techer[ul]|cablu[l])"
          class_plural: "(prize[le]|(ș|s)techere[le]|cabluri[le])"
          class: "(<class_singular>|<class_plural>)"
          state_singular: "{bs_plug_states_singular:state}"
          state_plural: "{bs_plug_states_plural:state}"
          state: "({bs_plug_states_singular:state}|{bs_plug_states_plural:state})"
        response: which
        slots:
          domain: binary_sensor
          device_class: plug

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "(priz(ă|a)|(ș|s)techer[ul]|cablu[l])"
          class_plural: "(prize[le]|(ș|s)techere[le]|cabluri[le])"
          class: "(<class_singular>|<class_plural>)"
          state_singular: "{bs_plug_states_singular:state}"
          state_plural: "{bs_plug_states_plural:state}"
          state: "({bs_plug_states_singular:state}|{bs_plug_states_plural:state})"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: plug

      # Power
      - sentences:
          - "<name_dinZona_este_state>"
        expansion_rules:
          state_singular: "{bs_power_states_singular:state}"
          state_plural: "{bs_power_states_plural:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: power
        slots:
          domain: binary_sensor
          device_class: power

      - sentences:
          - "<exista_class_state_in_zona>"
        expansion_rules:
          class_singular: "(aparat|dispozitiv|obiect)[ul]"
          class_plural: "(aparat|dispozitiv|obiect)[ele]"
          class: "(aparat|dispozitiv|obiect)([ul]|e[le])"
          state_singular: "{bs_power_states_singular:state}"
          state_plural: "{bs_power_states_plural:state}"
          state: "({bs_power_states_singular:state}|{bs_power_states_plural:state})"
        response: any
        slots:
          domain: binary_sensor
          device_class: power

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "(aparat|dispozitiv|obiect)[ul]"
          class_plural: "(aparat|dispozitiv|obiect)[ele]"
          class: "(aparat|dispozitiv|obiect)([ul]|e[le])"
          state_singular: "{bs_power_states_singular:state}"
          state_plural: "{bs_power_states_plural:state}"
          state: "({bs_power_states_singular:state}|{bs_power_states_plural:state})"
        response: all
        slots:
          domain: binary_sensor
          device_class: power

      - sentences:
          - "<care_class_este_state_in_zona>"
        expansion_rules:
          class_singular: "(aparat|dispozitiv|obiect)[ul]"
          class_plural: "(aparat|dispozitiv|obiect)[ele]"
          class: "(aparat|dispozitiv|obiect)([ul]|e[le])"
          state_singular: "{bs_power_states_singular:state}"
          state_plural: "{bs_power_states_plural:state}"
          state: "({bs_power_states_singular:state}|{bs_power_states_plural:state})"
        response: which
        slots:
          domain: binary_sensor
          device_class: power

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
        expansion_rules:
          class_singular: "(aparat|dispozitiv|obiect)[ul]"
          class_plural: "(aparat|dispozitiv|obiect)e[le]"
          class: "(aparat|dispozitiv|obiect)([ul]|e[le])"
          state_singular: "{bs_power_states_singular:state}"
          state_plural: "{bs_power_states_plural:state}"
          state: "({bs_power_states_singular:state}|{bs_power_states_plural:state})"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: power

      # Presence
      - sentences:
          - "<name_dinZona_este_state>"
        expansion_rules:
          state: "{bs_presence_states:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: presence
        slots:
          domain: binary_sensor
          device_class: presence

      # Problem
      - sentences:
          - "(sunt probleme|<exista> [[vre]o ]problem(ă|a)) [<detectat> ]([<in> leg(ă|a)tur(ă|a) ]cu|la) <name>[ <din_zona>]"
          - "are (probleme|vreo problema) <name>[ <din_zona>]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: problem
        slots:
          domain: binary_sensor
          device_class: problem
          state: "on"

      - sentences:
          - "<exista_object_detectat_in_zona_passive>"
        expansion_rules:
          object_singular: "problem(ă|a)"
          object_plural: "probleme[le]"
          object: "problem(ă|a|e[le])"
        response: any
        slots:
          domain: binary_sensor
          device_class: problem

      - sentences:
          - "<care_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "problem(ă|a)"
          object_plural: "probleme[le]"
          object: "problem(ă|a|e[le])"
        response: which
        slots:
          domain: binary_sensor
          device_class: problem

      - sentences:
          - "<cate_detecteaza_object_in_zona>"
        expansion_rules:
          object_singular: "problem(ă|a)"
          object_plural: "probleme[le]"
          object: "problem(ă|a|e[le])"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: problem

      # Running
      - sentences:
          - "<name_dinZona_este_state>"
          - "<name_dinZona_verbState>"
        expansion_rules:
          state_singular: "{bs_running_states_singular:state}"
          state_plural: "{bs_running_states_plural:state}"
          verb_state: "{bs_running_states_active:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: running
        slots:
          domain: binary_sensor
          device_class: running

      - sentences:
          - "<exista_class_state_in_zona>"
          - "<exista_class_care_verbState_in_zona>"
        expansion_rules:
          class_singular: "((dispozitiv|aparat|proces)[ul]|lucru[l])"
          class_plural: "(dispozitive|aparate|procese|lucruri)[le]"
          object: "((dispozitiv|aparat|proces)([ul]|e[le])|lucru([l]|ri[le]))"
          state_singular: "{bs_running_states_singular:state}"
          state_plural: "{bs_running_states_plural:state}"
          state: "({bs_running_states_singular:state}|{bs_running_states_plural:state})"
          verb_state: "{bs_running_states_active:state}"
        response: any
        slots:
          domain: binary_sensor
          device_class: running

      - sentences:
          - "<toate_class_sunt_state_in_zona>"
          - "<toate_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "((dispozitiv|aparat|proces|script)[ul]|automatizare[a]|lucru[l])"
          class_plural: "(dispozitive|aparate|procese|scripturi|automatiz(ă|a)ri|lucruri)[le]"
          object: "((dispozitiv|aparat|proces)([ul]|e[le])|script([ul]|uri[le])|automatiz(are[a]|(ă|a)ri[le])|lucru([l]|ri[le]))"
          state_singular: "{bs_running_states_singular:state}"
          state_plural: "{bs_running_states_plural:state}"
          state: "({bs_running_states_singular:state}|{bs_running_states_plural:state})"
          verb_state: "{bs_running_states_active:state}"
        response: all
        slots:
          domain: binary_sensor
          device_class: running

      - sentences:
          - "<care_class_este_state_in_zona>"
          - "<care_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "((dispozitiv|aparat|proces|script)[ul]|automatizare[a]|lucru[l])"
          class_plural: "(dispozitive|aparate|procese|scripturi|automatiz(ă|a)ri|lucruri)[le]"
          object: "((dispozitiv|aparat|proces)([ul]|e[le])|script([ul]|uri[le])|automatiz(are[a]|(ă|a)ri[le])|lucru([l]|ri[le]))"
          state_singular: "{bs_running_states_singular:state}"
          state_plural: "{bs_running_states_plural:state}"
          state: "({bs_running_states_singular:state}|{bs_running_states_plural:state})"
          verb_state: "{bs_running_states_active:state}"
        response: which
        slots:
          domain: binary_sensor
          device_class: running

      - sentences:
          - "<cate_class_sunt_state_in_zona>"
          - "<cate_class_verbState_in_zona>"
        expansion_rules:
          class_singular: "((dispozitiv|aparat|proces|script)[ul]|automatizare[a]|lucru[l])"
          class_plural: "(dispozitive|aparate|procese|scripturi|automatiz(ă|a)ri|lucruri)[le]"
          object: "((dispozitiv|aparat|proces)([ul]|e[le])|script([ul]|uri[le])|automatiz(are[a]|(ă|a)ri[le])|lucru([l]|ri[le]))"
          state_singular: "{bs_running_states_singular:state}"
          state_plural: "{bs_running_states_plural:state}"
          state: "({bs_running_states_singular:state}|{bs_running_states_plural:state})"
          verb_state: "{bs_running_states_active:state}"
        response: how_many
        slots:
          domain: binary_sensor
          device_class: running

      # Safety
      - sentences:
          - "<name_dinZona_este_state>"
        expansion_rules:
          state: "{bs_safety_states:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: safety
        slots:
          domain: binary_sensor
          device_class: safety

      # Smoke
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object: "fum[ul]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: smoke
        slots:
          domain: binary_sensor
          device_class: smoke
      - sentences:
          - "<este> [<detectat> ][vreun pic de ]fum[ul] <in> <area>"
        response: any
        slots:
          domain: binary_sensor
          device_class: smoke
          state: "on"

      # Sound
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
        expansion_rules:
          object_singular: "(zgomot|sunet)[ul]"
          object_plural: "(zgomot|sunet)e[le]"
          object: "(zgomot|sunet)[(ul|e)]"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: sound
        slots:
          domain: binary_sensor
          device_class: sound

      # Tamper
      - sentences:
          - "(<name>[ <din_zona>];(<este>|a fost) {bs_tamper_states:state})"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: tamper
        slots:
          domain: binary_sensor
          device_class: tamper

      # Update
      - sentences:
          - "<exista> [<vreun> ]update [disponibil ](pentru|la) <name>[ <din_zona>]"
          - "sunt update[[-]uri] [disponibile ](pentru|la) <name>[ <din_zona>]"
          - "<name>[ <din_zona>] are ([<vreun> ]update[ disponibil]|update[-]uri[ disponibile])"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: update
        slots:
          domain: binary_sensor
          device_class: update
          state: "on"
      - sentences:
          - "<este> (actualizat|la zi) <name>[ <din_zona>]"
          - "<name>[ <din_zona>] este (actualizat|la zi)"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: update
        slots:
          domain: binary_sensor
          device_class: update
          state: "off"

      # Vibration
      - sentences:
          - "<name_detecteaza_object_in_zona>"
          - "<name_detecteaza_object_in_zona_passive>"
          - "<name_dinZona_verbState>"
        expansion_rules:
          object_singular: "vibra(ț|t)i(e|a)"
          object_plural: "vibra(ț|t)ii[le]"
          object: "vibra(ț|t)i(e|a|i[le])"
          verb_state: "{bs_vibration_states_active:state}"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class: vibration
        slots:
          domain: binary_sensor
          device_class: vibration

      # Window
      - sentences:
          - "<name_class_dinZona_este_state>"
          - "<name_class_dinZona_verbState>"
        expansion_rules:
          class_singular: "<fereastra>"
          class_plural: "<ferestrele>"
          class: "(<fereastra>|<ferestrele>)"
          state_singular: "{bs_door_states_singular:state}"
          state_plural: "{bs_door_states_plural:state}"
          verb_state: "({bs_door_states_passive:state}|{bs_door_states_active:state})"
        response: one_yesno
        requires_context:
          domain: binary_sensor
          device_class:
            - door
            - garage_door
            - opening
            - window
        slots:
          domain: binary_sensor
